# Bool #############################################################################################

true = \iftrue iffalse.iftrue;

false = \iftrue iffalse.iffalse;

not = \a.a false true;

and = \a b.a b false;

or = \a b.a true b;

# Function #########################################################################################

id = \x.x;

comp = \f g x.f (g x);

flip = \f x y.f y x;

fix = \f.(\x.f (x x)) (\x.f (x x));

# Pair #############################################################################################

pair = \a b ifpair.ifpair a b;

fst = \pair.pair \a b.a;

snd = \pair.pair \a b.b;

# List #############################################################################################

nil = \ifnil ifcons.ifnil;

cons = \head tail ifnil ifcons.ifcons head tail;

head = \list.list
  nil
  \head tail.head;

tail = \list.list
  nil
  \head tail.tail;

foldr = \f init list.list
  init
  \head tail.f head (foldr f init tail);

foldl = \f init list.list
  init
  \head tail.foldl f (f init head) tail;

map = \f.foldr (comp cons f) nil;

rev = foldl (flip cons) nil;

! map head ["back", "slash"] == "bs";
! rev "rev" == "ver";

# Int ##############################################################################################
# Balanced ternary as described in:
# Mogensen, T.Æ. (2001). An Investigation of Compact and Efficient Number Representations in the
# Pure Lambda Calculus. In: Bjørner, D., Broy, M., Zamulin, A.V. (eds) Perspectives of System
# Informatics. PSI 2001. Lecture Notes in Computer Science, vol 2244. Springer, Berlin, Heidelberg.
# https://doi.org/10.1007/3-540-45575-2_20

up- = \n z x- x0 x+.x- (n z x- x0 x+);

up0 = \n z x- x0 x+.x0 (n z x- x0 x+);

up+ = \n z x- x0 x+.x+ (n z x- x0 x+);

zero? = \n.n true (\x.false) id (\x.false);

pos? =
  Z = pair false false;
  A- = \p.p \done res.done p (pair true false);
  A0 = id;
  A+ = \p.p \done res.done p (pair true true);
  \n.snd (n Z A- A0 A+);

neg? =
  Z = pair false false;
  A- = \p.p \done res.done p (pair true true);
  A0 = id;
  A+ = \p.p \done res.done p (pair true false);
  \n.snd (n Z A- A0 A+);

inc =
  Z = pair 0 1;
  A- = \p.p \n m.pair (up- n) (up0 n);
  A0 = \p.p \n m.pair (up0 n) (up+ n);
  A+ = \p.p \n m.pair (up+ n) (up- m);
  \n.snd (n Z A- A0 A+);

dec =
  Z = pair 0 -1;
  A- = \p.p \n m.pair (up- n) (up+ m);
  A0 = \p.p \n m.pair (up0 n) (up- n);
  A+ = \p.p \n m.pair (up+ n) (up0 n);
  \n.snd (n Z A- A0 A+);

lift =
  A- = \n z x- x0 x+.x- n;
  A0 = \n z x- x0 x+.x0 n;
  A+ = \n z x- x0 x+.x+ n;
  \n.n 0 A- A0 A+;

drop =
  A- = \m.up- (drop m);
  A0 = \m.up0 (drop m);
  A+ = \m.up+ (drop m);
  \n.n 0 A- A0 A+;

# We could define this later as `\x y.zero? (sub x y)` but it's a nice example of the technique used
# to implement add, while being slightly simpler than add.
eq =
  Z = \n.zero? (drop n);
  A- = \e n.n false (\m.e m) (\m.false) (\m.false);
  A0 = \e n.n (e n) (\m.false) (\m.e m) (\m.false);
  A+ = \e n.n false (\m.false) (\m.false) (\m.e m);
  go = \n.n Z A- A0 A+;
  \x y.go x (lift y);

add =
  trit- = \x- x0 x+.x-;
  trit0 = \x- x0 x+.x0;
  trit+ = \x- x0 x+.x+;
  Z = \n c.c (dec (drop n)) (drop n) (inc (drop n));
  C = \a n.a n trit0;
  B-- = \a c m.c (up0 (a m trit-)) (up+ (a m trit-)) (up- (a m trit0));
  B0- = \a c m.c (up+ (a m trit-)) (up- (a m trit0)) (up0 (a m trit0));
  B00 = \a c m.c (up- (a m trit0)) (up0 (a m trit0)) (up+ (a m trit0));
  B0+ = \a c m.c (up0 (a m trit0)) (up+ (a m trit0)) (up- (a m trit+));
  B++ = \a c m.c (up+ (a m trit0)) (up- (a m trit+)) (up0 (a m trit+));
  A- = \a n c.n (B0- a c n) (B-- a c) (B0- a c) (B00 a c);
  A0 = \a n c.n (B00 a c n) (B0- a c) (B00 a c) (B0+ a c);
  A+ = \a n c.n (B0+ a c n) (B00 a c) (B0+ a c) (B++ a c);
  go = \n.C (n Z A- A0 A+);
  \x y.go x (lift y);

neg = \n z x- x0 x+.n z x+ x0 x-;

sub = \x y.add x (neg y);

mul = \n m.n 0 (\n.sub (up0 n) m) (\n.up0 n) (\n.add (up0 n) m);

lt = \x y.neg? (sub x y);

gt = \x y.pos? (sub x y);

lte = \x y.not (gt x y);

gte = \x y.not (lt x y);

# The "very slow" algorithm from https://en.wikipedia.org/wiki/Division_algorithm
# TODO implement something faster
divrem = \n d.
  (neg? d)
    (divrem n (neg d) \q r.pair (neg q) r)
    ((neg? n)
      (divrem (neg n) d \q r.
        (zero? r)
          (pair (neg q) 0)
          (pair (dec (neg q)) (sub d r)))
      posDivrem = \q r.
        (lt r d)
          (pair q r)
          (posDivrem (inc q) (sub r d));
      (posDivrem 0 n));

div = \x y.fst (divrem x y);

rem = \x y.snd (divrem x y);

# String ###########################################################################################
# Encoded as a List of Char (which is to say, a List of Int)

intToString =
  posIntToString = \n s.(divrem n 10) \q r.
    s* = (cons (add '0' r) s);
    (zero? q) s* (posIntToString q s*);
  \n.
    (neg? n)
      (cons '-' (posIntToString (neg n) nil))
      (posIntToString n nil);

stringToInt =
  posStringToInt = foldl (\n d.add (mul n 10) (sub d '0')) 0;
  \s.
    (eq '-' (head s))
      (neg (posStringToInt (tail s)))
      (posStringToInt s);
